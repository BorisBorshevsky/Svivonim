using System;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;

namespace Svivonim
{
    /// <summary>
    /// This is the main type for your game.
    /// </summary>
    public class Svivonim : Game
    {
        GraphicsDeviceManager graphics;
        SpriteBatch spriteBatch;

        private VertexPositionColor[] verts;
        private BasicEffect effect;
        private VertexBuffer Buffer;

        private Vector3 position;
        private float rotationY;


        public Svivonim()
        {
            graphics = new GraphicsDeviceManager(this);
            Content.RootDirectory = "Content";
        }

        protected override void Initialize()
        {


            verts = new VertexPositionColor[3]
            {
                new VertexPositionColor(new Vector3(0.0f, 1.0f, 0.0f), Color.Red),
                new VertexPositionColor(new Vector3(-1.0f, -1.0f, 0.0f), Color.Blue),
                new VertexPositionColor(new Vector3(1.0f, -1.0f, 0.0f), Color.Green)
            };

            effect = new BasicEffect(GraphicsDevice);

            Buffer = new VertexBuffer(GraphicsDevice, VertexPositionColor.VertexDeclaration, 3, BufferUsage.WriteOnly);
            Buffer.SetData(verts);

            position = new Vector3(0,0,5);


            base.Initialize();
        }

        protected override void LoadContent()
        {
            spriteBatch = new SpriteBatch(GraphicsDevice);

            // TODO: use this.Content to load your game content here
        }

        protected override void UnloadContent()
        {
            // TODO: Unload any non ContentManager content here
        }

        protected override void Update(GameTime gameTime)
        {
            if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed || Keyboard.GetState().IsKeyDown(Keys.Escape))
                Exit();

            // TODO: Add your update logic here

            float deltaTime = (float)gameTime.ElapsedGameTime.TotalSeconds;
            rotationY += deltaTime * 1000;

            base.Update(gameTime);
        }

        protected override void Draw(GameTime gameTime)
        {
            GraphicsDevice.Clear(Color.CornflowerBlue);


            effect.Projection = Matrix.CreatePerspectiveFieldOfView(MathHelper.PiOver4,
                GraphicsDevice.Viewport.AspectRatio, 0.01f, 1000f);

            effect.View = Matrix.CreateLookAt(new Vector3(0, 0, -5), Vector3.Forward, Vector3.Up);

            effect.World = Matrix.Identity *Matrix.CreateRotationY(rotationY) * Matrix.CreateTranslation(position);

            effect.VertexColorEnabled = true;


            foreach (var pass in effect.CurrentTechnique.Passes)
            {
                pass.Apply();

                GraphicsDevice.DrawUserPrimitives(PrimitiveType.TriangleList, verts, 0 ,1);
            }

            base.Draw(gameTime);
        }
    }
}
